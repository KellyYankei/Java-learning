L1 Types, Variables, Operators
  compile Java : Source Code -> javac -> Bythe Code -> Java

  Programme structure:
class CLASSNAME{
    public static void main(String[] args){
      STATEMENTS
    }
}

OUTPUT: System.out.println(some string);

Types: boolean, int, doubles, String
  parentheses 圆括号 > / * > + -

L2 More types, Methods, Conditionals
  double d = 5/2  // d=2.0

  adding methods:
  public static void NAME(){
    STATEMENTS;
  }

Return Values：
  public static TYPE NAME(){
    STATEMENTS
    return EXPRESSION;
  }

Mathematic Functions:
  Math.sin(x) 
  Math.cos(Math.PI/2)
  Math.pow(2,3)
  Math.log(Math.log(x+y))

if statement
if (CONDITIONS){
  STATEMENTS
}

Conversion by methods
  String five = Integer.toString(5);
  String five = "" + 5; // five="5"

Comparison operators
  Do not call == on doubles! EVER
  double a = Math.cos(Math.PI/2);
  double b = 0.0;

L3: Loops, Arrays

Frequent Issues(I)
              public static void main(String[] args){
              }
Frequent Issue(Ⅱ)
  don't create duplicate variables with the same name
  int salary = 0 ;
  int salary = 0 ;
  double salary = 0 ;

good programming style 
    1. meaningful names
    2. whitespace 
    3. don't duplicate tests (if)

loops
    while (condition){
        statements
    }

for (initialization;condition;update){
    statements
}

break terminate a for or a while loop
continue skips the current iteration and proceeds directly to next loops

Arrays: all elements of an array must have the same type
starts at zero and ends at length-1 
    int[] values = new int[5];
    values[0] = 12;
    values[5] = 12; // compile but throws an exception at run-time

Arrays are just another type 
    int[][] values;
    int[] is a type

To create a array of a given size, use the operator new
    int[] values = new int[5];
or  int size = 2;
    int[] values = new int[size];

Array initialization (after decalaration)
    int[] values = {8,12,24,-23};

Accessing arrays 
    values[3] = 18;

    int size = values.length;

L4 Classes and objects

set int min = Integer.MAX_VALUE;

Debugging Notes:
  1. Using System.out.println
  2. Ctrl+shift+f

Note 
  1. Class names are capitalized
  2. 1 Class = 1 file
  3. having a main method means the class can be run

Defining classes:
Constructor:

public class CLASSNAME{
    CLASSNAME(){
    }
    CLASSNAME([ARGUMENTS]){
    }
}
CLASSNAME OBJ1 = new CLASSNAME();
CLASSNAME OBJ2 = new CLASSNAME();

Baby constructor:

public class Baby{
    String name;
    boolean isMale;
    Baby[] siblings;
    Baby(String myname, boolean maleBaby){
        name = myname;
        ismale = maleBaby;
    }
}

Using classes:
    Baby shilon = new Baby("Jolie",true);
    Baby knox = new Baby("Kelly",false);
Accessing fields:
    shilon.name
    Object.FIELDNAME

Primitives vs References
-> basic Java types  -> arrays, objects
                        String, int[], Baby
                        store elsewhere -> stores a number that locates the object
                                            The object's location is called a reference
                                            Using '=' updates the reference

Static types and methods
    static: means the field/method is defined for the class
    static field:
    public class Baby{
      static int numberBabiesmade = 0;
      Baby(){
        numberBabiesmade += 1; // class counter
      }
    }
    static method:
    public class Baby{
        static void cry(Baby thebaby){
            System.out.println(thebaby.name+"cries";){
            }
        }
    }
    public class Baby{
      void cry(){
            System.out.println(name+"cries");
      }
    }

L5 Access Control, Class scope, Packages, Java, API
public class Counter{
    int myCount = 0;
    static int ourCount = 0;
    void increment(){
        myCount ++;
        ourCount ++ ;
    }
    public static void main(String[] args){
        Counter counter1 = new Counter();
        Counter counter2 = new Counter();
        counter1.increment();
        counter2.increment();  
        counter2,increment();  //myCount always change
    }
}

Access Control
    public class Malicious{
      public static void main(String[] args){
          maliciousMethod(new CreditCard());
          static void maliciousMethod(CreditCard card){
              card.expenses = 0;
              System.out.println(card.cardNumber);
          }
      }
    }
    public: other classes in this package can use 
    private: only this class can use 
    public and private can apply to any field and method

this keyword
    class Example{
        int memberVariable;
        void setVariable(int newVal){
            this.memberVariable += newVal;
        }
    }

Packages:
    Each class belongs to a package
    Classes in the same package serve a similar purpose
    Packages are just directories
    Classes in other packages need to be imported
                          example:
                              package adult;
                              import parenttools.Baby;
                              import parenttools.BabyFood;
                              public class Parent{
                                  public static void main(String[] args){
                                      Baby.baby = new Baby();
                                      baby.feed(new BabyFood());
                                  }
                              }
    All classes see classes in the same package
    All classes see classes in Java.lang

ArrayList: loop over all items
                    example:
                        import java.util.ArrayList;
                        class ArrayListExample{
                            public static void mian(String[] arguments){
                                ArrayList<String> strings = new ArrayList<String>();
                                strings.add("Abcd");
                                strings.add("Eddy");
                                strings.add("Adam");
                                System.out.println(strings.size());
                                System.out.println(strings.get(0));
                                System.out.println(strings.get(1));
                
                                strings.set(0,"Goodbye");
                                strings.remove(1);
                                for(int i = 0; i< strings.size(); i++){
                                    System.out.println(strings.get(i));
                                }
                                for(String s : strings){
                                    System.out.println(s);
                                }
                            }
                        }
Sets: 
      only have one copy for each objects
      no array index
      features: add/remove objects from the set

      Treeset: sorted
      Hashset: unordered
                        example:
                            import java.util.TreeSet;
                            class SetExample{
                                public static void main(String[] arguments){
                                    TreeSet<String> strings = new TreeSet<String>();
                                    strings.add("Abcd");
                                    strings.add("Eddy");
                                    strings.add("Adam");
                                    System.out.println(strings.size());
                                    System.out.println(strings.first());
                                    System.out.println(strings.last());
                  
                                    strings.remove("Abcd");
                                    for(String s : strings){
                                        System.out.println(s);
                                   }
                                }
                            }
Maps
       stores a key and value pair

        TreeMap: sorted
        HashMap: unordered

examples
public static void main(String[] arguments){
    HashMap<String,String> strings = new HashMap<String,String>();
    strings.put("Abcd","abcd@mit.edu");
    strings.put("Eddy","eddy@mit.edu");
    System.out.println(strings.size());
    strings.remove("Abcd");
    System.out.println(strings.get("Eddy"))
    for(String s : strings.keySet()){
        System.out.println(s);
    }
    for(String s : strings.values()){
        System.out.println(s);
    }
  }

L6
    interface
    public class Flower{
        public void draw(Graphics surface){
            //code to draw a flower
        }
    }
    public class DrawGraphics{
        ArrayList<BouncingBox> boxes = new ArrayList<BouncingBox>();
        ArrayList<Flower> flowers = new ArrayList<Flower>();
        ArrayList<Car> cars = new ArrayList<Car>;

        public void draw(Graphic surface){
              for(BouncingBox box : boxes){
                  box.draw(surface);
              }
              for(Flower flower : flowers){
                  flower.draw(surface);
              }
        }
    }
    Interface: Drawable
        import java.awt.Graphics;
        interface Drawable{
            void draw(Graphics surface){
                void draw(Graphics surface);
                void setColor(Color color);
            }
        }
    Interface Notes:
        only have methods(mostly true)
        do not provide code, only the definition
        a class can implement any number of interface
    

    
    


